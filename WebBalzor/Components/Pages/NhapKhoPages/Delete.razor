@page "/nhapkhos/delete"
@using Microsoft.EntityFrameworkCore
@using WebBalzor.Models
@inject IDbContextFactory<WebBalzor.Data.MyAppDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>NhapKho</h2>
    <hr />
    @if (nhapkho is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Kho_ID</dt>
            <dd class="col-sm-10">@nhapkho.Kho_ID</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">NCC_ID</dt>
            <dd class="col-sm-10">@nhapkho.NCC_ID</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Ngay_Nhap_Kho</dt>
            <dd class="col-sm-10">@nhapkho.Ngay_Nhap_Kho</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Ghi_Chu</dt>
            <dd class="col-sm-10">@nhapkho.Ghi_Chu</dd>
        </dl>
        <EditForm method="post" Model="nhapkho" OnValidSubmit="DeleteNhapKho" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(nhapkho is null)">Delete</button> |
            <a href="/nhapkhos">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private NhapKho? nhapkho;

    [SupplyParameterFromQuery]
    private string So_Phieu_Nhap_Kho { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        nhapkho = await context.DM_Nhap_Kho.FirstOrDefaultAsync(m => m.So_Phieu_Nhap_Kho == So_Phieu_Nhap_Kho);

        if (nhapkho is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteNhapKho()
    {
        using var context = DbFactory.CreateDbContext();
        context.DM_Nhap_Kho.Remove(nhapkho!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/nhapkhos");
    }
}

@page "/donvitinhs/edit"

@inject IDbContextFactory<WebBalzor.Data.MyAppDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>DonViTinh</h2>
<hr />
@if (DonViTinh is null)
{
                <p><em>Loading...</em></p>
}
else
{
                <div class="row">
                    <div class="col-md-4">
                        <EditForm method="post" Model="DonViTinh" OnValidSubmit="UpdateDonViTinh" FormName="edit" Enhance>
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <input type="hidden" name="DonViTinh.Id" value="@DonViTinh.Id" />
                            <div class="mb-3">
                                <label for="ten_don_vi_tinh" class="form-label">Ten_Don_Vi_Tinh:</label>
                                <InputText id="ten_don_vi_tinh" @bind-Value="DonViTinh.Ten_Don_Vi_Tinh" class="form-control" />
                                <ValidationMessage For="() => DonViTinh.Ten_Don_Vi_Tinh" class="text-danger" />
                            </div>
                            <div class="mb-3">
                                <label for="ghi_chu" class="form-label">Ghi_Chu:</label>
                                <InputText id="ghi_chu" @bind-Value="DonViTinh.Ghi_Chu" class="form-control" />
                                <ValidationMessage For="() => DonViTinh.Ghi_Chu" class="text-danger" />
                            </div>
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                                            <div class="text-danger">@errorMessage</div>
                }
                            <button type="submit" class="btn btn-primary">Save</button> |
                            <a href="/donvitinhs" class="btn btn-outline-secondary">Back to List</a>
                        </EditForm>
                    </div>
                </div>
}

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private DonViTinh? DonViTinh { get; set; }

    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        DonViTinh ??= await context.DonViTinh.FirstOrDefaultAsync(m => m.Id == Id);

        if (DonViTinh is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task UpdateDonViTinh()
    {
        using var context = DbFactory.CreateDbContext();

        // Kiểm tra xem tên đơn vị tính đã tồn tại hay chưa, ngoại trừ đơn vị tính hiện tại
        var existingDonViTinh = await context.DonViTinh
            .FirstOrDefaultAsync(d => d.Ten_Don_Vi_Tinh.ToLower() == DonViTinh.Ten_Don_Vi_Tinh.ToLower() && d.Id != DonViTinh.Id);

        if (existingDonViTinh != null)
        {
            errorMessage = "Tên đơn vị tính đã tồn tại. Vui lòng nhập tên khác.";
            return;
        }

        context.Attach(DonViTinh!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!DonViTinhExists(DonViTinh!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/donvitinhs");
    }

    private bool DonViTinhExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.DonViTinh.Any(e => e.Id == id);
    }
}

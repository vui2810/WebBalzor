@page "/donvitinhs/delete"

@inject IDbContextFactory<WebBalzor.Data.MyAppDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>DonViTinh</h2>
    <hr />
    @if (donvitinh is null)
    {
                <p><em>Loading...</em></p>
    }
    else
    {
                <dl class="row">
                    <dt class="col-sm-2">Ten_Don_Vi_Tinh</dt>
                    <dd class="col-sm-10">@donvitinh.Ten_Don_Vi_Tinh</dd>
                </dl>
                <dl class="row">
                    <dt class="col-sm-2">Ghi_Chu</dt>
                    <dd class="col-sm-10">@donvitinh.Ghi_Chu</dd>
                </dl>
                <EditForm method="post" Model="donvitinh" OnValidSubmit="DeleteDonViTinh" FormName="delete" Enhance>
                        <button type="submit" class="btn btn-danger" disabled="@(donvitinh is null)">Delete</button> |
                        <a href="/donvitinhs"  class="btn btn-outline-secondary">Back to List</a>
                </EditForm>
    }
</div>

@code {
    private DonViTinh? donvitinh;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        donvitinh = await context.DonViTinh.FirstOrDefaultAsync(m => m.Id == Id);

        if (donvitinh is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteDonViTinh()
    {
        using var context = DbFactory.CreateDbContext();
        context.DonViTinh.Remove(donvitinh!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/donvitinhs");
    }
}
